#!/usr/bin/env bash

# Function to compile C and C++ easily
function compile() {
	declare -a flags;
	local i=0;
	local pattern="^-";
	for file in $@; do
		[[ $file =~ $pattern ]] && flags[$i]=$file && (( i++ ));
	done

	for file in $@; do      #looping through all the files passed in as arguments
		[[ $file =~ $pattern ]] && continue;

		local extension=${file#*.};     #storing the extension and executable of the file
		local executable=${file%.*};
		case $extension in
			c)
				gcc ${flags[@]} -o $executable $file;
				;;
			cpp)
				g++ ${flags[@]} -o $executable $file -std=c++17;
				;;
			*)
				echo "Invalid Extension";
				;;
		esac
	done
}

# compiles all the dependancies
# (i.e., all the c and cpp files associated with the local header files included)
function comdep() {
    regex="^\"(.*)\"$";
    for file in $@; do
        local extension=${file#*.};
        
        if [[ $extension == "c" ]]; then
            local compiler="gcc";
        elif [[ $extension == "cpp" ]]; then
            local compiler="g++";
        else
            echo "Invalid File";
            return;
        fi
        
        local executable=${file%.*};
        local i=0;
        local temp=( $(grep "#include \"*\"" $file | cut -f2 -d " ") );
        for line in ${temp[@]}; do
            [[ $line =~ $regex ]] && headers=${BASH_REMATCH[1]};
            
            if [[ ${headers#*.} == "h" ]]; then
                local dep_file=${headers%.*}"."${extension};
                if [[ ${dependancies[*]} =~ ${dep_file} ]]; then
                    continue;
                fi
                local dependancies[$i]=$dep_file;
                (( i++ ));
            fi
        
        done
        $compiler ${dependancies[@]} $file -o ${executable};
    done
}

# Displaying only the files
function files() {
    readarray -t files <<< $(ls -a);
    for file in "${files[@]}"; do
        [ -f "$file" ] && ls "$file";
    done | column -x;
}

# Displaying only the directories
function dirs() {
    readarray -t files <<< $(ls);
    for dir in "${files[@]}"; do
        [ -d "$dir" ] && ls -d "$dir";
    done | column -x;
}


# Function to give outline to C and C++ files
# SYNTAX : out [-v or -c or -cp] [C or CPP file]
# The order of the arguments doesn't matter and [-v or -c] is optional
# -v stands for open the created file in vim editor
# -c stands for open the created file in vscode (If it is installed)
# You can provide any number of files
function out() {
    if [ $# -eq 0 ]; then
        echo "Too Few Arguments";
        return;
    fi

    local i=0;

    for temp in $@; do
        case $temp in
            -*)
                local flag=$temp;
                ;;
            *.c)
                local files[$i]=$temp;
                (( i++ ));
                ;;
            *.cpp)
                local files[$i]=$temp;
                (( i++ ));
                ;;
            *.py)
                local files[$i]=$temp;
                (( i++ ));
                ;;
            *.java)
                local files[$i]=$temp;
                (( i++ ));
                ;;
            *)
                echo "Invalid Argument";
                return;
                ;;
        esac
    done

    if [ ${#files[@]} -eq 0 ]; then
        echo "File Name Required";
        return;
    fi

    for file in ${files[@]}; do
        local class=${file%.*};     #Only for java files
        local extension=${file#*.};
        
        if [[ $flag == "-cp" ]]; then
            local source="cp_outline."${extension};
        else
            local source="outline."${extension};
        fi

        if [[ ! -e ~/${source} ]]; then
            echo "Create a ${source} file in the Home Directory for creating ${file}";
            continue;
        fi

        if [ -e $file ]; then
            echo "$file Already exists";
            read -p "Do You Wanna replace its contents?[Y/N] : " permission;

            if [ $permission == n -o $permission == N ]; then
                continue;
            fi
        fi
        touch $file;

        # For java files we need to change the class name
        if [ $extension == "java" ]; then
            sed -i "s/class .*/class ${class} {/" ~/$source;
        fi


        cp ~/$source $file;

        if [ ! -z ${flag+x} ]; then
            if [ $flag == "-v" ]; then
                vim $file;
            elif [ $flag == "-c" ]; then
                code -r $file;
            elif [ $flag != "-cp" ]; then
                echo "Invalid Flag";
            fi
        fi
    done
}

#Function to create Directory and enter the directory
#Combining mkdir+cd commands
#Syntax: mcd dir_name
function mcd(){
	if [[ $# -ne 1 ]]; then
		echo "usage: mcd <dir_name>";
		return;
	fi

	if [[ -d $1 ]]; then
		echo "Opening Existing Directory!";
	else
		mkdir "$1";
		echo "Directory created";
	fi

	cd $1;
}
