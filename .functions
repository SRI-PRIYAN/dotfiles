#!/usr/bin/env bash

# Function to compile C and C++ easily
function compile() {
	declare -a flags;
	local i=0;
	local pattern="^-";
	for file in $@; do
		[[ $file =~ $pattern ]] && flags[$i]=$file && (( i++ ));
	done

	for file in $@; do      #looping through all the files passed in as arguments
		[[ $file =~ $pattern ]] && continue;

		local extension=${file#*.};     #storing the extension and executable of the file
		local executable=${file%.*};
		case $extension in
			c)
				gcc ${flags[@]} -o $executable $file;
				;;
			cpp)
				g++ ${flags[@]} -o $executable $file -std=c++17;
				;;
			*)
				echo "Invalid Extension";
				;;
		esac
	done
}

# compiles all the dependancies
# (i.e., all the c and cpp files associated with the local header files included)
function comdep() {
    regex="^\"(.*)\"$";
    for file in $@; do
        local extension=${file#*.};
        
        if [[ $extension == "c" ]]; then
            local compiler="gcc";
        elif [[ $extension == "cpp" ]]; then
            local compiler="g++";
        else
            echo "Invalid File";
            return;
        fi
        
        local executable=${file%.*};
        local i=0;
        local temp=( $(grep "#include \"*\"" $file | cut -f2 -d " ") );
        for line in ${temp[@]}; do
            [[ $line =~ $regex ]] && headers=${BASH_REMATCH[1]};
            
            if [[ ${headers#*.} == "h" ]]; then
                local dep_file=${headers%.*}"."${extension};
                if [[ ${dependancies[*]} =~ ${dep_file} ]]; then
                    continue;
                fi
                local dependancies[$i]=$dep_file;
                (( i++ ));
            fi
        
        done
        $compiler ${dependancies[@]} $file -o ${executable};
    done
}

# Displaying only the files
function files() {
    readarray -t files <<< $(ls -a);
    for file in "${files[@]}"; do
        [ -f "$file" ] && ls "$file";
    done | column -x;
}

# Displaying only the directories
function dirs() {
    readarray -t files <<< $(ls);
    for dir in "${files[@]}"; do
        [ -d "$dir" ] && ls -d "$dir";
    done | column -x;
}

#Function to create Directory and enter the directory
#Combining mkdir+cd commands
#Syntax: mcd dir_name
function mcd(){
	if [[ $# -ne 1 ]]; then
		echo "usage: mcd <dir_name>";
		return;
	fi

	if [[ -d $1 ]]; then
		echo "Opening Existing Directory!";
	else
		mkdir "$1";
		echo "Directory created";
	fi

	cd $1;
}
